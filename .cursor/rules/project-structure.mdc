---
alwaysApply: false
---
# 🏗️ Project Structure - Refactored Game Application

## 📁 **Root Directory Structure**

```
gameRefactor/
├── 📁 src/                          # Main source code (refactored)
│   ├── 📁 services/                 # Core business logic services
│   ├── 📁 routes/                   # API route definitions
│   ├── 📁 middleware/               # Express middleware
│   ├── 📁 socket/                   # Socket.IO configuration
│   └── server.js                    # Main server entry point
├── 📁 router/                       # Legacy router files (migration)
├── 📁 model/                        # Database models
├── 📁 config/                       # Configuration files
├── 📁 utils/                        # Utility functions
├── 📁 frontend/                     # React frontend application
├── 📁 scripts/                      # Migration and utility scripts
├── app.js                           # Legacy entry point (simplified)
├── app.js.backup                    # Original monolithic app.js (1627 lines)
├── ARCHITECTURE.md                   # Architecture documentation
├── MIGRATION_SUMMARY.md             # Migration process summary
└── README.md                        # Project overview
```

## 🔧 **Backend Architecture (Refactored)**

### **📁 src/services/ - Core Business Logic**
```
services/
├── GameManager.js           # Main orchestrator (15KB, 475 lines)
├── RoomManager.js           # Room lifecycle management (15KB, 536 lines)
├── GameFlowManager.js       # Game progression logic (20KB, 607 lines)
├── GameStateManager.js      # Game calculations & state (35KB, 957 lines)
├── RoundManager.js          # Round operations (11KB, 421 lines)
├── ParticipantManager.js    # Participant operations (19KB, 596 lines)
└── __tests__/               # Test files
    └── RoomManager.test.js  # Unit tests (5.3KB, 190 lines)
```

### **📁 src/routes/ - API Routes**
```
routes/
└── index.js                 # Main route definitions (1.1KB, 41 lines)
```

### **📁 src/middleware/ - Express Middleware**
```
middleware/
└── index.js                 # Middleware configuration (1.5KB, 56 lines)
```

### **📁 src/socket/ - Real-time Communication**
```
socket/
└── index.js                 # Socket.IO setup (1.5KB, 57 lines)
```

### **📁 src/server.js - Main Server**
```
server.js                    # Express server setup (1.7KB, 64 lines)
```

## 🗄️ **Database & Models**

### **📁 model/ - Database Schemas**
```
model/
├── game.js                  # Game model (1.3KB, 64 lines)
└── session.js               # Session model (859B, 39 lines)
```

### **📁 config/ - Configuration**
```
config/
├── environment.js           # Environment configuration (3.8KB, 155 lines)
├── keys_dev.js             # Development keys (138B, 4 lines)
├── keys.js                 # Production keys (156B, 5 lines)
└── keys_prod.js            # Production keys (51B, 3 lines)
```

### **📁 utils/ - Utility Functions**
```
utils/
├── validation.js            # Input validation (4.6KB, 191 lines)
├── dbConnect.js             # Database connection (390B, 15 lines)
└── logger.js                # Logging utility (195B, 11 lines)
```

## 🌐 **Frontend Application**

### **📁 frontend/ - React Application**
```
frontend/
├── 📁 src/                  # React source code
│   ├── 📁 components/       # Reusable components
│   ├── 📁 pages/            # Page components
│   ├── 📁 utils/            # Frontend utilities
│   ├── App.js               # Main app component (1.6KB, 50 lines)
│   ├── AppContext.js        # React context (1018B, 41 lines)
│   ├── App.scss             # Main stylesheet (5.5KB, 340 lines)
│   ├── index.js             # Entry point (329B, 15 lines)
│   ├── index.css            # Global styles (366B, 14 lines)
│   ├── reportWebVitals.js   # Performance monitoring (362B, 14 lines)
│   └── setupTests.js        # Test configuration (241B, 6 lines)
├── 📁 public/               # Static assets
├── 📁 build/                # Production build
└── package.json             # Frontend dependencies
```

### **📁 frontend/src/components/ - UI Components**

#### **🎮 Game Components**
```
components/Game/
├── Round.js                 # Main game round logic (8.6KB, 171 lines)
├── GameStop.js              # Game stop functionality (6.6KB, 123 lines)
├── RoleSelection.js         # Player role selection (1.5KB, 34 lines)
├── ParticipantsReady.js     # Participant readiness check (702B, 14 lines)
├── gamestop.module.css      # Game stop styles (1.5KB, 95 lines)
└── practice.module.css      # Practice mode styles (2.9KB, 173 lines)
```

#### **📊 Statistics Components**
```
components/Stats/
├── GamesCompleted.jsx       # Completed games statistics (2.7KB, 48 lines)
├── SessionsAll.jsx          # All sessions statistics (1.8KB, 44 lines)
├── SessionsCompleted.jsx    # Completed sessions statistics (1.8KB, 45 lines)
├── GamesStartedDroppedBeforePractices.jsx # Games dropped before practice (1.6KB, 36 lines)
├── NeverStartedGames.jsx    # Never started games statistics (743B, 23 lines)
└── GamesStartedDroppedAfterPractices.jsx # Games dropped after practice (2.6KB, 47 lines)
```

#### **⚠️ Near Miss Notification Components**
```
components/NearMissNotification/
├── CaseHLRN.js              # High Loss, Risk, Near Miss case (16KB, 356 lines)
├── CaseHLVN.js              # High Loss, Value, Near Miss case (18KB, 380 lines)
├── CaseLLRN.js              # Low Loss, Risk, Near Miss case (16KB, 356 lines)
├── CaseLLVN.js              # Low Loss, Value, Near Miss case (18KB, 375 lines)
├── index.js                 # Main notification component (2.6KB, 81 lines)
└── postIt.module.css        # Post-it notification styles (3.7KB, 192 lines)
```

#### **📝 Survey Components**
```
components/AdviceSurvey/
├── index.js                 # Main advice survey component (9.9KB, 231 lines)
├── DataAdviceSurvey.js      # Survey data structure (539B, 15 lines)
└── adviceSurvey.module.css  # Survey styles (2.7KB, 162 lines)

components/MemorySurvey/
├── index.js                 # Main memory survey component (10KB, 241 lines)
├── DataSurveyGen1.js        # Generation 1 survey data (2.1KB, 45 lines)
└── DataSurveyGen234.js      # Generation 2-4 survey data (2.2KB, 45 lines)

components/NearMissPreSurvey/
├── index.js                 # Main pre-survey component (22KB, 393 lines)
└── data.js                  # Pre-survey data structure (6.2KB, 138 lines)

components/NearMissPostSurvey/
├── index.js                 # Main post-survey component (17KB, 294 lines)
├── dataBaseline.js          # Baseline survey data (6.6KB, 147 lines)
└── dataTreatment.js         # Treatment survey data (7.9KB, 173 lines)
```

#### **🧩 Quiz & Solution Components**
```
components/QuizSolution/
├── index.js                 # Quiz solution component (6.7KB, 184 lines)
└── index.module.css         # Quiz solution styles (800B, 51 lines)

QuizSolution2.js             # Alternative quiz solution component (5.1KB, 150 lines)
Quizzes2.js                  # Enhanced quiz component (10KB, 266 lines)
```

#### **📱 UI Form Components**
```
Radio.js                     # Radio button component (644B, 23 lines)
Checkbox.js                  # Checkbox component (559B, 23 lines)
Input.js                     # Input field component (694B, 29 lines)
Select.js                    # Select dropdown component (565B, 18 lines)
SelectLarge.js               # Large select component (1.6KB, 28 lines)
SelectSmall.js               # Small select component (1.2KB, 24 lines)
HorizontalRadioBoxes.js      # Horizontal radio button group (1.5KB, 38 lines)
VerticalRadioBoxes.js        # Vertical radio button group (1.3KB, 37 lines)
RatingRadioButtons.js        # Rating radio buttons component (176B, 11 lines)
Breadcrumbs.js               # Navigation breadcrumbs component (582B, 15 lines)
```

#### **🔔 Notification Components**
```
components/ProgressBar/
├── index.js                 # Progress bar component (740B, 24 lines)
└── progressBar.module.css   # Progress bar styles (952B, 63 lines)

components/WaitingRoom/
└── index.js                 # Waiting room component (4.7KB, 101 lines)

components/ChattingRoom/
├── index.js                 # Chat room component (11KB, 382 lines)
└── chattingroom.module.css  # Chat room styles (0.0B, 0 lines)

components/HistoricText/
└── index.js                 # Historical text component (3.3KB, 130 lines)

components/AdviceText/
└── index.js                 # Advice text component (3.3KB, 130 lines)

components/DecisionResult/
├── index.js                 # Decision result component (51KB, 993 lines)
└── decisionresult.module.css # Decision result styles (10KB, 619 lines)

components/DepletionNotification/
└── index.js                 # Depletion notification component (2.0KB, 45 lines)

components/PracticeNotification/
└── index.js                 # Practice notification component (1.5KB, 18 lines)

components/TransitionNotification/
├── index.js                 # Transition notification component (4.2KB, 112 lines)
└── transition.module.css    # Transition styles (900B, 57 lines)
```

### **📁 frontend/src/pages/ - Page Components**

#### **🏠 Core Pages**
```
pages/Home/
├── index.js                 # Homepage component (3.8KB, 99 lines)
└── home.module.css          # Homepage styles (1.5KB, 93 lines)

pages/Welcome/
├── index.js                 # Welcome page component (6.0KB, 149 lines)
└── welcome.module.css       # Welcome page styles (1.8KB, 107 lines)

pages/Instruction/
├── index.js                 # Instruction component (6.6KB, 159 lines)
└── instruction.module.css   # Instruction styles (2.0KB, 127 lines)
```

#### **🎮 Game Pages**
```
pages/Game/
├── index.js                 # Main game page component (38KB, 993 lines)
└── game.module.css          # Game page styles (2.8KB, 174 lines)
```

#### **📋 Survey & Quiz Pages**
```
pages/Quizzes/
├── index.js                 # Quiz page component (8.4KB, 202 lines)
├── DataQuizzes.js           # Quiz data structure (11KB, 103 lines)
└── prequiz.module.css       # Quiz page styles (2.7KB, 161 lines)

pages/Survey/
├── index.js                 # Survey page component (6.8KB, 153 lines)
├── DataQuestionnaire.js     # Survey data structure (7.4KB, 130 lines)
└── questionnaire.module.css # Survey page styles (2.7KB, 161 lines)
```

#### **📊 Statistics & Results Pages**
```
pages/Stat/
├── index.js                 # Statistics page component (22KB, 591 lines)
└── stat.module.css          # Statistics page styles (1.5KB, 100 lines)

pages/DecisionResult/
├── index.js                 # Decision result component (51KB, 993 lines)
└── decisionresult.module.css # Decision result styles (10KB, 619 lines)
```

#### **🔚 End Game Pages**
```
pages/GoodBye/
├── index.js                 # Goodbye page component (4.1KB, 89 lines)
└── goodbye.module.css       # Goodbye page styles (1.9KB, 119 lines)

pages/Dropout/
├── index.js                 # Dropout page component (4.9KB, 101 lines)
└── dropout.module.css       # Dropout page styles (1.5KB, 99 lines)

pages/Stopped/
├── index.js                 # Stopped game page component (2.1KB, 51 lines)
└── stopped.module.css       # Stopped game page styles (1.6KB, 96 lines)

pages/RandomlyAssigned/
├── index.js                 # Random assignment page component (1.4KB, 43 lines)
└── randomlyAssigned.module.css # Random assignment page styles (1.6KB, 96 lines)

pages/NotFound/
└── index.js                 # 404 page component (109B, 11 lines)
```

### **📁 frontend/src/utils/ - Frontend Utilities**
```
utils/
├── routes.js                # Routing utilities (171B, 9 lines)
├── functions.js             # Common functions (1.8KB, 57 lines)
└── socket.js                # Socket.IO client configuration (1.9KB, 64 lines)
```

### **📁 frontend/public/ - Static Assets**
```
public/
├── index.html               # Main HTML template (634B, 22 lines)
├── manifest.json            # Web app manifest (393B, 23 lines)
├── robots.txt               # Search engine directives (67B, 4 lines)
├── favicon1.png             # Primary favicon (14KB, 33 lines)
├── favicon3.png             # Alternative favicon (13KB, 50 lines)
├── icon.png                 # App icon (20KB, 36 lines)
├── mainGameImage.png        # Main game image (122KB, 421 lines)
├── mainFlood.png            # Flood game image (199KB, 702 lines)
├── groundGame.png           # Ground game image (551KB, 1652 lines)
├── groundGame1.png          # Alternative ground game image (40KB, 122 lines)
├── farmer.png               # Farmer character (95KB, 384 lines)
├── farmerIcon.png           # Farmer icon (117KB, 374 lines)
├── provider.png             # Provider image (10KB, 52 lines)
├── providerEvin.png         # Provider Evin image (22KB, 90 lines)
├── provider-flat.png        # Flat provider image (6.1KB, 25 lines)
├── userEvin.png             # User Evin image (16KB, 61 lines)
├── purdueLogo.png           # Purdue logo (14KB, 27 lines)
├── oldPaper1.jpg            # Old paper texture (426KB, 1694 lines)
├── oldPaper1.png            # Old paper texture PNG (1.8MB)
├── gr.png                   # Ground reference image (40KB, 165 lines)
├── depletionGraph.png       # Depletion graph (92KB, 283 lines)
├── bubble.png               # Bubble effect (56KB, 122 lines)
├── coin.png                 # Coin image (12KB, 39 lines)
├── drop.png                 # Drop effect (6.8KB, 37 lines)
├── arrowRight.png           # Right arrow (6.9KB, 7 lines)
├── typing.mov               # Typing animation video (1023KB, 4133 lines)
├── instructionsNearMiss.mp4 # Near miss instructions (18MB)
└── Near-miss_experiment_video_instructionsV5.mp4 # Experiment video (62MB)
```

### **📁 frontend/build/ - Production Build**
```
build/
├── index.html               # Built HTML (632B, 1 lines)
├── asset-manifest.json      # Build manifest (517B, 15 lines)
├── robots.txt               # Built robots file (67B, 4 lines)
├── manifest.json            # Built manifest (393B, 23 lines)
├── 📁 static/               # Built static assets
│   ├── 📁 css/              # Built CSS files
│   │   ├── main.19677f18.css # Main stylesheet (305KB, 8 lines)
│   │   └── main.19677f18.css.map # CSS source map (502KB, 1 lines)
│   └── 📁 js/               # Built JavaScript files
│       ├── main.6d1b0264.js # Main bundle (1.1MB)
│       ├── main.6d1b0264.js.map # JS source map (5.5MB)
│       ├── main.6d1b0264.js.LICENSE.txt # License info (2.8KB, 114 lines)
│       ├── 453.d855a71b.chunk.js # Code split chunk (4.4KB, 2 lines)
│       └── 453.d855a71b.chunk.js.map # Chunk source map (10KB, 1 lines)
├── userEvin.png             # Built user image (16KB, 61 lines)
├── providerEvin.png         # Built provider image (22KB, 90 lines)
├── purdueLogo.png           # Built Purdue logo (14KB, 27 lines)
├── provider.png             # Built provider image (10KB, 52 lines)
├── oldPaper1.png            # Built paper texture (1.8MB)
├── provider-flat.png        # Built flat provider image (6.1KB, 25 lines)
├── oldPaper1.jpg            # Built paper texture JPG (426KB, 1694 lines)
├── mainFlood.png            # Built flood image (199KB, 702 lines)
├── mainGameImage.png        # Built main game image (122KB, 421 lines)
├── groundGame1.png          # Built ground game image 1 (40KB, 122 lines)
├── icon.png                 # Built icon (20KB, 36 lines)
├── groundGame.png           # Built ground game image (551KB, 1652 lines)
├── gr.png                   # Built ground reference (40KB, 165 lines)
├── farmerIcon.png           # Built farmer icon (117KB, 374 lines)
├── favicon1.png             # Built favicon 1 (14KB, 33 lines)
├── favicon3.png             # Built favicon 3 (13KB, 50 lines)
├── farmer.png               # Built farmer image (95KB, 384 lines)
├── depletionGraph.png       # Built depletion graph (92KB, 283 lines)
├── drop.png                 # Built drop effect (6.8KB, 37 lines)
├── bubble.png               # Built bubble effect (56KB, 122 lines)
├── coin.png                 # Built coin image (12KB, 39 lines)
├── arrowRight.png           # Built right arrow (6.9KB, 7 lines)
└── Near-miss_experiment_video_instructionsV5.mp4 # Built experiment video (62MB)
```

## 🔄 **Migration & Legacy Files**

### **📁 router/ - Legacy Router Files**
```
router/
├── gameRouter.js            # Game API endpoints (4.8KB, 163 lines)
└── sessionRouter.js         # Session management API (4.1KB, 111 lines)
```

### **📁 scripts/ - Migration Scripts**
```
scripts/
├── migrate.js               # Main migration script (3.5KB, 112 lines)
└── migrate-code.js          # Code migration utilities (8.8KB, 280 lines)
```

## 🏛️ **Architecture Overview**

### **Service Layer Pattern**
- **GameManager**: Central orchestrator, handles all game operations
- **RoomManager**: Manages room lifecycle, participant assignment
- **GameFlowManager**: Controls game step progression and timing
- **GameStateManager**: Handles game calculations and state updates
- **RoundManager**: Manages individual round operations
- **ParticipantManager**: Handles participant lifecycle and coordination

### **Key Benefits of Refactoring**
- **Before**: 1627 lines in single `app.js` file
- **After**: 50-600 lines per focused service
- **Maintainability**: Clear separation of concerns
- **Testability**: Each service can be unit tested independently
- **Scalability**: Services can scale independently
- **Team Development**: Clear ownership and reduced conflicts

## 🚀 **Quick Start Commands**

```bash
# Install dependencies
npm install

# Start development server
npm start

# Run tests
npm test

# Frontend development
cd frontend
npm start
```

## 📊 **File Size Distribution**

- **Total Backend**: ~120KB across 6 service files
- **Largest Service**: GameStateManager.js (35KB) - Complex game logic
- **Average Service**: ~20KB - Focused, maintainable size
- **Legacy Code**: app.js.backup (58KB) - Original monolithic structure
- **Frontend Components**: ~200KB across 30+ component files
- **Frontend Pages**: ~150KB across 12 page components
- **Static Assets**: ~100MB including images and videos

## 🎯 **Interview-Ready Features**

✅ **Real-time multiplayer game** with Socket.IO  
✅ **Complex business logic** (game flow, flood simulation)  
✅ **Professional architecture** with service layer pattern  
✅ **Database integration** with MongoDB/Mongoose  
✅ **Input validation** and security middleware  
✅ **Comprehensive error handling** and logging  
✅ **Testing infrastructure** ready for unit tests  
✅ **Rich UI components** (30+ reusable components)  
✅ **Multiple game scenarios** (Near Miss, Practice, etc.)  
✅ **Data collection system** (surveys, quizzes, statistics)  

## 🔍 **Component Categories**

### **Game Logic (6 components)**
- Round management, role selection, game flow control

### **Survey System (12 components)**
- Pre/post surveys, memory tests, advice collection

### **Notifications (8 components)**
- Near miss alerts, practice reminders, transitions

### **Statistics (6 components)**
- Game completion rates, session analytics, dropout tracking

### **UI Elements (15 components)**
- Forms, inputs, progress bars, navigation

### **Page Components (12 pages)**
- Complete user journey from welcome to completion

---

**This refactored structure demonstrates professional-grade development skills and architectural thinking that will impress any technical interviewer! 🏆**
# 🏗️ Project Structure - Refactored Game Application

## 📁 **Root Directory Structure**

```
gameRefactor/
├── 📁 src/                          # Main source code (refactored)
│   ├── 📁 services/                 # Core business logic services
│   ├── 📁 routes/                   # API route definitions
│   ├── 📁 middleware/               # Express middleware
│   ├── 📁 socket/                   # Socket.IO configuration
│   └── server.js                    # Main server entry point
├── 📁 router/                       # Legacy router files (migration)
├── 📁 model/                        # Database models
├── 📁 config/                       # Configuration files
├── 📁 utils/                        # Utility functions
├── 📁 frontend/                     # React frontend application
├── 📁 scripts/                      # Migration and utility scripts
├── app.js                           # Legacy entry point (simplified)
├── app.js.backup                    # Original monolithic app.js (1627 lines)
├── ARCHITECTURE.md                   # Architecture documentation
├── MIGRATION_SUMMARY.md             # Migration process summary
└── README.md                        # Project overview
```

## 🔧 **Backend Architecture (Refactored)**

### **📁 src/services/ - Core Business Logic**
```
services/
├── GameManager.js           # Main orchestrator (15KB, 475 lines)
├── RoomManager.js           # Room lifecycle management (15KB, 536 lines)
├── GameFlowManager.js       # Game progression logic (20KB, 607 lines)
├── GameStateManager.js      # Game calculations & state (35KB, 957 lines)
├── RoundManager.js          # Round operations (11KB, 421 lines)
├── ParticipantManager.js    # Participant operations (19KB, 596 lines)
└── __tests__/               # Test files
    └── RoomManager.test.js  # Unit tests (5.3KB, 190 lines)
```

### **📁 src/routes/ - API Routes**
```
routes/
└── index.js                 # Main route definitions (1.1KB, 41 lines)
```

### **📁 src/middleware/ - Express Middleware**
```
middleware/
└── index.js                 # Middleware configuration (1.5KB, 56 lines)
```

### **📁 src/socket/ - Real-time Communication**
```
socket/
└── index.js                 # Socket.IO setup (1.5KB, 57 lines)
```

### **📁 src/server.js - Main Server**
```
server.js                    # Express server setup (1.7KB, 64 lines)
```

## 🗄️ **Database & Models**

### **📁 model/ - Database Schemas**
```
model/
├── game.js                  # Game model (1.3KB, 64 lines)
└── session.js               # Session model (859B, 39 lines)
```

### **📁 config/ - Configuration**
```
config/
├── environment.js           # Environment configuration (3.8KB, 155 lines)
├── keys_dev.js             # Development keys (138B, 4 lines)
├── keys.js                 # Production keys (156B, 5 lines)
└── keys_prod.js            # Production keys (51B, 3 lines)
```

### **📁 utils/ - Utility Functions**
```
utils/
├── validation.js            # Input validation (4.6KB, 191 lines)
├── dbConnect.js             # Database connection (390B, 15 lines)
└── logger.js                # Logging utility (195B, 11 lines)
```

## 🌐 **Frontend Application**

### **📁 frontend/ - React Application**
```
frontend/
├── 📁 src/                  # React source code
│   ├── 📁 components/       # Reusable components
│   ├── 📁 pages/            # Page components
│   ├── 📁 utils/            # Frontend utilities
│   ├── App.js               # Main app component (1.6KB, 50 lines)
│   ├── AppContext.js        # React context (1018B, 41 lines)
│   ├── App.scss             # Main stylesheet (5.5KB, 340 lines)
│   ├── index.js             # Entry point (329B, 15 lines)
│   ├── index.css            # Global styles (366B, 14 lines)
│   ├── reportWebVitals.js   # Performance monitoring (362B, 14 lines)
│   └── setupTests.js        # Test configuration (241B, 6 lines)
├── 📁 public/               # Static assets
├── 📁 build/                # Production build
└── package.json             # Frontend dependencies
```

### **📁 frontend/src/components/ - UI Components**

#### **🎮 Game Components**
```
components/Game/
├── Round.js                 # Main game round logic (8.6KB, 171 lines)
├── GameStop.js              # Game stop functionality (6.6KB, 123 lines)
├── RoleSelection.js         # Player role selection (1.5KB, 34 lines)
├── ParticipantsReady.js     # Participant readiness check (702B, 14 lines)
├── gamestop.module.css      # Game stop styles (1.5KB, 95 lines)
└── practice.module.css      # Practice mode styles (2.9KB, 173 lines)
```

#### **📊 Statistics Components**
```
components/Stats/
├── GamesCompleted.jsx       # Completed games statistics (2.7KB, 48 lines)
├── SessionsAll.jsx          # All sessions statistics (1.8KB, 44 lines)
├── SessionsCompleted.jsx    # Completed sessions statistics (1.8KB, 45 lines)
├── GamesStartedDroppedBeforePractices.jsx # Games dropped before practice (1.6KB, 36 lines)
├── NeverStartedGames.jsx    # Never started games statistics (743B, 23 lines)
└── GamesStartedDroppedAfterPractices.jsx # Games dropped after practice (2.6KB, 47 lines)
```

#### **⚠️ Near Miss Notification Components**
```
components/NearMissNotification/
├── CaseHLRN.js              # High Loss, Risk, Near Miss case (16KB, 356 lines)
├── CaseHLVN.js              # High Loss, Value, Near Miss case (18KB, 380 lines)
├── CaseLLRN.js              # Low Loss, Risk, Near Miss case (16KB, 356 lines)
├── CaseLLVN.js              # Low Loss, Value, Near Miss case (18KB, 375 lines)
├── index.js                 # Main notification component (2.6KB, 81 lines)
└── postIt.module.css        # Post-it notification styles (3.7KB, 192 lines)
```

#### **📝 Survey Components**
```
components/AdviceSurvey/
├── index.js                 # Main advice survey component (9.9KB, 231 lines)
├── DataAdviceSurvey.js      # Survey data structure (539B, 15 lines)
└── adviceSurvey.module.css  # Survey styles (2.7KB, 162 lines)

components/MemorySurvey/
├── index.js                 # Main memory survey component (10KB, 241 lines)
├── DataSurveyGen1.js        # Generation 1 survey data (2.1KB, 45 lines)
└── DataSurveyGen234.js      # Generation 2-4 survey data (2.2KB, 45 lines)

components/NearMissPreSurvey/
├── index.js                 # Main pre-survey component (22KB, 393 lines)
└── data.js                  # Pre-survey data structure (6.2KB, 138 lines)

components/NearMissPostSurvey/
├── index.js                 # Main post-survey component (17KB, 294 lines)
├── dataBaseline.js          # Baseline survey data (6.6KB, 147 lines)
└── dataTreatment.js         # Treatment survey data (7.9KB, 173 lines)
```

#### **🧩 Quiz & Solution Components**
```
components/QuizSolution/
├── index.js                 # Quiz solution component (6.7KB, 184 lines)
└── index.module.css         # Quiz solution styles (800B, 51 lines)

QuizSolution2.js             # Alternative quiz solution component (5.1KB, 150 lines)
Quizzes2.js                  # Enhanced quiz component (10KB, 266 lines)
```

#### **📱 UI Form Components**
```
Radio.js                     # Radio button component (644B, 23 lines)
Checkbox.js                  # Checkbox component (559B, 23 lines)
Input.js                     # Input field component (694B, 29 lines)
Select.js                    # Select dropdown component (565B, 18 lines)
SelectLarge.js               # Large select component (1.6KB, 28 lines)
SelectSmall.js               # Small select component (1.2KB, 24 lines)
HorizontalRadioBoxes.js      # Horizontal radio button group (1.5KB, 38 lines)
VerticalRadioBoxes.js        # Vertical radio button group (1.3KB, 37 lines)
RatingRadioButtons.js        # Rating radio buttons component (176B, 11 lines)
Breadcrumbs.js               # Navigation breadcrumbs component (582B, 15 lines)
```

#### **🔔 Notification Components**
```
components/ProgressBar/
├── index.js                 # Progress bar component (740B, 24 lines)
└── progressBar.module.css   # Progress bar styles (952B, 63 lines)

components/WaitingRoom/
└── index.js                 # Waiting room component (4.7KB, 101 lines)

components/ChattingRoom/
├── index.js                 # Chat room component (11KB, 382 lines)
└── chattingroom.module.css  # Chat room styles (0.0B, 0 lines)

components/HistoricText/
└── index.js                 # Historical text component (3.3KB, 130 lines)

components/AdviceText/
└── index.js                 # Advice text component (3.3KB, 130 lines)

components/DecisionResult/
├── index.js                 # Decision result component (51KB, 993 lines)
└── decisionresult.module.css # Decision result styles (10KB, 619 lines)

components/DepletionNotification/
└── index.js                 # Depletion notification component (2.0KB, 45 lines)

components/PracticeNotification/
└── index.js                 # Practice notification component (1.5KB, 18 lines)

components/TransitionNotification/
├── index.js                 # Transition notification component (4.2KB, 112 lines)
└── transition.module.css    # Transition styles (900B, 57 lines)
```

### **📁 frontend/src/pages/ - Page Components**

#### **🏠 Core Pages**
```
pages/Home/
├── index.js                 # Homepage component (3.8KB, 99 lines)
└── home.module.css          # Homepage styles (1.5KB, 93 lines)

pages/Welcome/
├── index.js                 # Welcome page component (6.0KB, 149 lines)
└── welcome.module.css       # Welcome page styles (1.8KB, 107 lines)

pages/Instruction/
├── index.js                 # Instruction component (6.6KB, 159 lines)
└── instruction.module.css   # Instruction styles (2.0KB, 127 lines)
```

#### **🎮 Game Pages**
```
pages/Game/
├── index.js                 # Main game page component (38KB, 993 lines)
└── game.module.css          # Game page styles (2.8KB, 174 lines)
```

#### **📋 Survey & Quiz Pages**
```
pages/Quizzes/
├── index.js                 # Quiz page component (8.4KB, 202 lines)
├── DataQuizzes.js           # Quiz data structure (11KB, 103 lines)
└── prequiz.module.css       # Quiz page styles (2.7KB, 161 lines)

pages/Survey/
├── index.js                 # Survey page component (6.8KB, 153 lines)
├── DataQuestionnaire.js     # Survey data structure (7.4KB, 130 lines)
└── questionnaire.module.css # Survey page styles (2.7KB, 161 lines)
```

#### **📊 Statistics & Results Pages**
```
pages/Stat/
├── index.js                 # Statistics page component (22KB, 591 lines)
└── stat.module.css          # Statistics page styles (1.5KB, 100 lines)

pages/DecisionResult/
├── index.js                 # Decision result component (51KB, 993 lines)
└── decisionresult.module.css # Decision result styles (10KB, 619 lines)
```

#### **🔚 End Game Pages**
```
pages/GoodBye/
├── index.js                 # Goodbye page component (4.1KB, 89 lines)
└── goodbye.module.css       # Goodbye page styles (1.9KB, 119 lines)

pages/Dropout/
├── index.js                 # Dropout page component (4.9KB, 101 lines)
└── dropout.module.css       # Dropout page styles (1.5KB, 99 lines)

pages/Stopped/
├── index.js                 # Stopped game page component (2.1KB, 51 lines)
└── stopped.module.css       # Stopped game page styles (1.6KB, 96 lines)

pages/RandomlyAssigned/
├── index.js                 # Random assignment page component (1.4KB, 43 lines)
└── randomlyAssigned.module.css # Random assignment page styles (1.6KB, 96 lines)

pages/NotFound/
└── index.js                 # 404 page component (109B, 11 lines)
```

### **📁 frontend/src/utils/ - Frontend Utilities**
```
utils/
├── routes.js                # Routing utilities (171B, 9 lines)
├── functions.js             # Common functions (1.8KB, 57 lines)
└── socket.js                # Socket.IO client configuration (1.9KB, 64 lines)
```

### **📁 frontend/public/ - Static Assets**
```
public/
├── index.html               # Main HTML template (634B, 22 lines)
├── manifest.json            # Web app manifest (393B, 23 lines)
├── robots.txt               # Search engine directives (67B, 4 lines)
├── favicon1.png             # Primary favicon (14KB, 33 lines)
├── favicon3.png             # Alternative favicon (13KB, 50 lines)
├── icon.png                 # App icon (20KB, 36 lines)
├── mainGameImage.png        # Main game image (122KB, 421 lines)
├── mainFlood.png            # Flood game image (199KB, 702 lines)
├── groundGame.png           # Ground game image (551KB, 1652 lines)
├── groundGame1.png          # Alternative ground game image (40KB, 122 lines)
├── farmer.png               # Farmer character (95KB, 384 lines)
├── farmerIcon.png           # Farmer icon (117KB, 374 lines)
├── provider.png             # Provider image (10KB, 52 lines)
├── providerEvin.png         # Provider Evin image (22KB, 90 lines)
├── provider-flat.png        # Flat provider image (6.1KB, 25 lines)
├── userEvin.png             # User Evin image (16KB, 61 lines)
├── purdueLogo.png           # Purdue logo (14KB, 27 lines)
├── oldPaper1.jpg            # Old paper texture (426KB, 1694 lines)
├── oldPaper1.png            # Old paper texture PNG (1.8MB)
├── gr.png                   # Ground reference image (40KB, 165 lines)
├── depletionGraph.png       # Depletion graph (92KB, 283 lines)
├── bubble.png               # Bubble effect (56KB, 122 lines)
├── coin.png                 # Coin image (12KB, 39 lines)
├── drop.png                 # Drop effect (6.8KB, 37 lines)
├── arrowRight.png           # Right arrow (6.9KB, 7 lines)
├── typing.mov               # Typing animation video (1023KB, 4133 lines)
├── instructionsNearMiss.mp4 # Near miss instructions (18MB)
└── Near-miss_experiment_video_instructionsV5.mp4 # Experiment video (62MB)
```

### **📁 frontend/build/ - Production Build**
```
build/
├── index.html               # Built HTML (632B, 1 lines)
├── asset-manifest.json      # Build manifest (517B, 15 lines)
├── robots.txt               # Built robots file (67B, 4 lines)
├── manifest.json            # Built manifest (393B, 23 lines)
├── 📁 static/               # Built static assets
│   ├── 📁 css/              # Built CSS files
│   │   ├── main.19677f18.css # Main stylesheet (305KB, 8 lines)
│   │   └── main.19677f18.css.map # CSS source map (502KB, 1 lines)
│   └── 📁 js/               # Built JavaScript files
│       ├── main.6d1b0264.js # Main bundle (1.1MB)
│       ├── main.6d1b0264.js.map # JS source map (5.5MB)
│       ├── main.6d1b0264.js.LICENSE.txt # License info (2.8KB, 114 lines)
│       ├── 453.d855a71b.chunk.js # Code split chunk (4.4KB, 2 lines)
│       └── 453.d855a71b.chunk.js.map # Chunk source map (10KB, 1 lines)
├── userEvin.png             # Built user image (16KB, 61 lines)
├── providerEvin.png         # Built provider image (22KB, 90 lines)
├── purdueLogo.png           # Built Purdue logo (14KB, 27 lines)
├── provider.png             # Built provider image (10KB, 52 lines)
├── oldPaper1.png            # Built paper texture (1.8MB)
├── provider-flat.png        # Built flat provider image (6.1KB, 25 lines)
├── oldPaper1.jpg            # Built paper texture JPG (426KB, 1694 lines)
├── mainFlood.png            # Built flood image (199KB, 702 lines)
├── mainGameImage.png        # Built main game image (122KB, 421 lines)
├── groundGame1.png          # Built ground game image 1 (40KB, 122 lines)
├── icon.png                 # Built icon (20KB, 36 lines)
├── groundGame.png           # Built ground game image (551KB, 1652 lines)
├── gr.png                   # Built ground reference (40KB, 165 lines)
├── farmerIcon.png           # Built farmer icon (117KB, 374 lines)
├── favicon1.png             # Built favicon 1 (14KB, 33 lines)
├── favicon3.png             # Built favicon 3 (13KB, 50 lines)
├── farmer.png               # Built farmer image (95KB, 384 lines)
├── depletionGraph.png       # Built depletion graph (92KB, 283 lines)
├── drop.png                 # Built drop effect (6.8KB, 37 lines)
├── bubble.png               # Built bubble effect (56KB, 122 lines)
├── coin.png                 # Built coin image (12KB, 39 lines)
├── arrowRight.png           # Built right arrow (6.9KB, 7 lines)
└── Near-miss_experiment_video_instructionsV5.mp4 # Built experiment video (62MB)
```

## 🔄 **Migration & Legacy Files**

### **📁 router/ - Legacy Router Files**
```
router/
├── gameRouter.js            # Game API endpoints (4.8KB, 163 lines)
└── sessionRouter.js         # Session management API (4.1KB, 111 lines)
```

### **📁 scripts/ - Migration Scripts**
```
scripts/
├── migrate.js               # Main migration script (3.5KB, 112 lines)
└── migrate-code.js          # Code migration utilities (8.8KB, 280 lines)
```

## 🏛️ **Architecture Overview**

### **Service Layer Pattern**
- **GameManager**: Central orchestrator, handles all game operations
- **RoomManager**: Manages room lifecycle, participant assignment
- **GameFlowManager**: Controls game step progression and timing
- **GameStateManager**: Handles game calculations and state updates
- **RoundManager**: Manages individual round operations
- **ParticipantManager**: Handles participant lifecycle and coordination

### **Key Benefits of Refactoring**
- **Before**: 1627 lines in single `app.js` file
- **After**: 50-600 lines per focused service
- **Maintainability**: Clear separation of concerns
- **Testability**: Each service can be unit tested independently
- **Scalability**: Services can scale independently
- **Team Development**: Clear ownership and reduced conflicts

## 🚀 **Quick Start Commands**

```bash
# Install dependencies
npm install

# Start development server
npm start

# Run tests
npm test

# Frontend development
cd frontend
npm start
```

## 📊 **File Size Distribution**

- **Total Backend**: ~120KB across 6 service files
- **Largest Service**: GameStateManager.js (35KB) - Complex game logic
- **Average Service**: ~20KB - Focused, maintainable size
- **Legacy Code**: app.js.backup (58KB) - Original monolithic structure
- **Frontend Components**: ~200KB across 30+ component files
- **Frontend Pages**: ~150KB across 12 page components
- **Static Assets**: ~100MB including images and videos

## 🎯 **Interview-Ready Features**

✅ **Real-time multiplayer game** with Socket.IO  
✅ **Complex business logic** (game flow, flood simulation)  
✅ **Professional architecture** with service layer pattern  
✅ **Database integration** with MongoDB/Mongoose  
✅ **Input validation** and security middleware  
✅ **Comprehensive error handling** and logging  
✅ **Testing infrastructure** ready for unit tests  
✅ **Rich UI components** (30+ reusable components)  
✅ **Multiple game scenarios** (Near Miss, Practice, etc.)  
✅ **Data collection system** (surveys, quizzes, statistics)  

## 🔍 **Component Categories**

### **Game Logic (6 components)**
- Round management, role selection, game flow control

### **Survey System (12 components)**
- Pre/post surveys, memory tests, advice collection

### **Notifications (8 components)**
- Near miss alerts, practice reminders, transitions

### **Statistics (6 components)**
- Game completion rates, session analytics, dropout tracking

### **UI Elements (15 components)**
- Forms, inputs, progress bars, navigation

### **Page Components (12 pages)**
- Complete user journey from welcome to completion

---

**This refactored structure demonstrates professional-grade development skills and architectural thinking that will impress any technical interviewer! 🏆**
